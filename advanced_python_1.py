"""
Реализуйте функцию hide_card(), которая принимает один аргумент:

card_number — строка, представляющая собой корректный номер банковской карты
из 1616 цифр, между которыми могут присутствовать символы пробела
Функция должна заменять первые 1212 цифр в строке card_number на символ *
и возвращать полученный результат. Если между цифрами в номере имелись
символы пробела, их следует удалить.
"""


def hide_card(number):
    number_without_spaces = number.replace(" ", "")
    result = ""
    count = 0
    if len(number_without_spaces) == 16:
        for num in number_without_spaces:
            if count <= 12:
                result += "*"
            else:
                result += num
            count += 1
    return str(result)


"""
Реализуйте функцию same_parity(), которая принимает один аргумент:

numbers — список целых чисел
Функция должна возвращать новый список, элементами которого являются числа 
из списка numbers, имеющие ту же четность, что и первый элемент этого списка."""


def same_parity(numbers):
    try:
        first_even = True if numbers[0] % 2 == 0 else False
        result = [el for el in numbers if el % 2 != first_even]
    except IndexError:
        result = numbers
    return result


"""
Функция is_valid()
Будем считать, что PIN-код является корректным, если он удовлетворяет 
следующим условиям:

состоит из 44, 55 или 66 символов
состоит только из цифр (0-90−9)
не содержит пробелов
Реализуйте функцию is_valid(), которая принимает один аргумент:

string — произвольная строка
Функция должна возвращать значение True, если строка string представляет 
собой корректный PIN-код, или False в противном случае."""


def is_valid(string: str):
    return (4 <= len(string) <= 6) and string.isdigit()


"""Реализуйте функцию print_given(), которая принимает произвольное 
количество позиционных и именованных аргументов и выводит все переданные 
аргументы, указывая тип каждого. Пары аргумент-тип должны выводиться 
каждая на отдельной строке, в следующем формате:

для позиционных аргументов:
<значение аргумента> <тип аргумента>
для именованных аргументов:
<имя переменной> <значение аргумента> <тип аргумента>"""


def print_given(*args, **kwargs):
    result = []
    for el in args:
        print(el, type(el))
    for name, value in kwargs.items():
        result.append([name, value, type(value)])
    [print(*el) for el in sorted(result)]


"""
Функция convert()
Реализуйте функцию convert(), которая принимает один аргумент:

string — произвольная строка
Функция должна возвращать строку string:

полностью в нижнем регистре, если букв в нижнем регистре в этой строке больше
полностью в верхнем регистре, если букв в верхнем регистре в этой строке больше
полностью в нижнем регистре, если количество букв в верхнем и нижнем регистрах 
в этой строке совпадает
"""


def convert(string: str):
    count_of_lower = sum([1 for el in string if el.islower() and el.isalpha()])
    count_of_upper = sum([1 for el in string if el.isupper() and el.isalpha()])
    return string.lower() if count_of_lower >= count_of_upper else string.upper()


"""
Анаграммы — это слова, которые состоят из одинаковых букв. Например:

адаптер — петарда
адресочек — середочка
азбука — базука
аистенок — осетинка
Реализуйте функцию filter_anagrams(), которая принимает два аргумента в 
следующем порядке:

word — слово в нижнем регистре
words — список слов в нижнем регистре
Функция должна возвращать список, элементами которого являются слова из списка 
words, которые представляют анаграмму слова word. Если список words пуст или 
не содержит анаграмм, функция должна вернуть пустой список."""


def filter_anagrams(word, words: list):
    words = list(filter(lambda el: (sorted(el) == sorted(word)), words))
    return words


"""
В различных социальных сетях существуют системы лайков, которые в 
зависимости от количества людей, оценивших запись, показывают 
соответствующую информацию.

Реализуйте функцию likes(), которая принимает один аргумент:

names — список имён
Функция должна возвращать строку в соответствии с примерами ниже, 
содержание которой зависит от количества имён в списке names.

Приведенный ниже код:

print(likes([]))
print(likes(['Тимур']))
print(likes(['Тимур', 'Артур']))
print(likes(['Тимур', 'Артур', 'Руслан']))
print(likes(['Тимур', 'Артур', 'Руслан', 'Анри']))
print(likes(['Тимур', 'Артур', 'Руслан', 'Анри', 'Дима']))
print(likes(['Тимур', 'Артур', 'Руслан', 'Анри', 'Дима', 'Рома', 
'Гвидо', 'Марк']))
должен выводить:

Никто не оценил данную запись
Тимур оценил(а) данную запись
Тимур и Артур оценили данную запись
Тимур, Артур и Руслан оценили данную запись
Тимур, Артур и 2 других оценили данную запись
Тимур, Артур и 3 других оценили данную запись
Тимур, Артур и 6 других оценили данную запись
"""


def likes(s):
    result = (
        "'Никто не оценил'",
        "f'{s[0]} оценил(а)'",
        "f'{s[0]} и {s[1]} оценили'",
        "f'{s[0]}, {s[1]} и {s[2]} оценили'",
        "f'{s[0]}, {s[1]} и {len(s) - 2} других оценили'",
    )
    return eval(result[len(s) if len(s) <= 3 else 4]) + " данную запись"


"""Реализуйте функцию index_of_nearest(), которая принимает два аргумента в 
следующем порядке:

numbers — список целых чисел
number — целое число
Функция должна находить в списке numbers ближайшее по значению число к 
числу number и возвращать его индекс. Если список numbers пуст, функция 
должна вернуть число -1−1.

Примечание 1. Если в функцию передается список, содержащий несколько 
чисел, одновременно являющихся ближайшими к искомому числу, функция 
должна возвращать наименьший из индексов ближайших чисел."""


def index_of_nearest(numbers: list, number: int):
    if len(numbers) < 1:
        return -1
    numbers_difference = [abs(el - number) for el in numbers]
    min_diff = min(numbers_difference)
    nearest = numbers_difference.index(min_diff)
    return nearest


"""
Реализуйте функцию spell(), которая принимает произвольное количество 
позиционных аргументов-слов и возвращает словарь, ключи которого — первые 
буквы слов, а значения — максимальные длины слов на эту букву.
"""


def spell(*words_list):
    main_letter = [word[0].lower() for word in words_list]
    max_length = dict.fromkeys(main_letter, 0)
    for word in words_list:
        if len(word) > max_length[word[0].lower()]:
            max_length[word[0].lower()] = len(word)
    return max_length


"""
Реализуйте функцию choose_plural(), которая принимает два аргумента в следующем порядке:

amount — натуральное число, количество
declensions — кортеж из трех вариантов склонения существительного
Функция должна возвращать строку, полученную путем объединения подходящего 
существительного из кортежа declensions и количества amount, в следующем формате:

<количество> <существительное>
"""


def choose_plural(amount: int, declensions: tuple):
    if amount % 10 == 1 and amount % 100 != 11:
        declension = declensions[0]
    elif amount % 10 in (2, 3, 4) and amount % 100 not in (12, 13, 14):
        declension = declensions[1]
    else:
        declension = declensions[2]
    return f"{amount} {declension}"


"""
Реализуйте функцию get_biggest(), которая принимает один аргумент:

numbers — список целых неотрицательных чисел
Функция должна возвращать наибольшее число, которое можно составить из чисел из списка 
numbers. Если список numbers пуст, функция должна вернуть число -1−1."""


def get_biggest():
    pass


if __name__ == "__main__":

    print(choose_plural(512312, ("цент", "цента", "центов")))
    print(choose_plural(59, ("помидор", "помидора", "помидоров")))
    print(choose_plural(23424157, ("огурец", "огурца", "огурцов")))
    print(choose_plural(240, ("курица", "курицы", "куриц")))
    print(choose_plural(49324, ("плюмбус", "плюмбуса", "плюмбусов")))
    print(choose_plural(505, ("утка", "утки", "уток")))
    print(choose_plural(666, ("шкаф", "шкафа", "шкафов")))
    print(choose_plural(11, ("стул", "стула", "стульев")))
    print(choose_plural(3458438435812, ("доллар", "доллара", "долларов")))
